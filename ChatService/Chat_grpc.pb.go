// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ChatService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChittyChatServiceINClient is the client API for ChittyChatServiceIN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChittyChatServiceINClient interface {
	Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*PublishMessageReply, error)
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinReply, error)
	Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveReply, error)
}

type chittyChatServiceINClient struct {
	cc grpc.ClientConnInterface
}

func NewChittyChatServiceINClient(cc grpc.ClientConnInterface) ChittyChatServiceINClient {
	return &chittyChatServiceINClient{cc}
}

func (c *chittyChatServiceINClient) Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*PublishMessageReply, error) {
	out := new(PublishMessageReply)
	err := c.cc.Invoke(ctx, "/chat.ChittyChatServiceIN/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chittyChatServiceINClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinReply, error) {
	out := new(JoinReply)
	err := c.cc.Invoke(ctx, "/chat.ChittyChatServiceIN/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chittyChatServiceINClient) Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveReply, error) {
	out := new(LeaveReply)
	err := c.cc.Invoke(ctx, "/chat.ChittyChatServiceIN/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChittyChatServiceINServer is the server API for ChittyChatServiceIN service.
// All implementations must embed UnimplementedChittyChatServiceINServer
// for forward compatibility
type ChittyChatServiceINServer interface {
	Publish(context.Context, *Message) (*PublishMessageReply, error)
	Join(context.Context, *JoinRequest) (*JoinReply, error)
	Leave(context.Context, *LeaveRequest) (*LeaveReply, error)
	mustEmbedUnimplementedChittyChatServiceINServer()
}

// UnimplementedChittyChatServiceINServer must be embedded to have forward compatible implementations.
type UnimplementedChittyChatServiceINServer struct {
}

func (UnimplementedChittyChatServiceINServer) Publish(context.Context, *Message) (*PublishMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedChittyChatServiceINServer) Join(context.Context, *JoinRequest) (*JoinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedChittyChatServiceINServer) Leave(context.Context, *LeaveRequest) (*LeaveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedChittyChatServiceINServer) mustEmbedUnimplementedChittyChatServiceINServer() {}

// UnsafeChittyChatServiceINServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChittyChatServiceINServer will
// result in compilation errors.
type UnsafeChittyChatServiceINServer interface {
	mustEmbedUnimplementedChittyChatServiceINServer()
}

func RegisterChittyChatServiceINServer(s grpc.ServiceRegistrar, srv ChittyChatServiceINServer) {
	s.RegisterService(&ChittyChatServiceIN_ServiceDesc, srv)
}

func _ChittyChatServiceIN_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChittyChatServiceINServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChittyChatServiceIN/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChittyChatServiceINServer).Publish(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChittyChatServiceIN_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChittyChatServiceINServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChittyChatServiceIN/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChittyChatServiceINServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChittyChatServiceIN_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChittyChatServiceINServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChittyChatServiceIN/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChittyChatServiceINServer).Leave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChittyChatServiceIN_ServiceDesc is the grpc.ServiceDesc for ChittyChatServiceIN service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChittyChatServiceIN_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChittyChatServiceIN",
	HandlerType: (*ChittyChatServiceINServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _ChittyChatServiceIN_Publish_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _ChittyChatServiceIN_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _ChittyChatServiceIN_Leave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ChatService/Chat.proto",
}

// ChittyChatServiceOUTClient is the client API for ChittyChatServiceOUT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChittyChatServiceOUTClient interface {
	BroadCast(ctx context.Context, in *BroadCastRequest, opts ...grpc.CallOption) (*BroadCastReply, error)
}

type chittyChatServiceOUTClient struct {
	cc grpc.ClientConnInterface
}

func NewChittyChatServiceOUTClient(cc grpc.ClientConnInterface) ChittyChatServiceOUTClient {
	return &chittyChatServiceOUTClient{cc}
}

func (c *chittyChatServiceOUTClient) BroadCast(ctx context.Context, in *BroadCastRequest, opts ...grpc.CallOption) (*BroadCastReply, error) {
	out := new(BroadCastReply)
	err := c.cc.Invoke(ctx, "/chat.ChittyChatServiceOUT/BroadCast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChittyChatServiceOUTServer is the server API for ChittyChatServiceOUT service.
// All implementations must embed UnimplementedChittyChatServiceOUTServer
// for forward compatibility
type ChittyChatServiceOUTServer interface {
	BroadCast(context.Context, *BroadCastRequest) (*BroadCastReply, error)
	mustEmbedUnimplementedChittyChatServiceOUTServer()
}

// UnimplementedChittyChatServiceOUTServer must be embedded to have forward compatible implementations.
type UnimplementedChittyChatServiceOUTServer struct {
}

func (UnimplementedChittyChatServiceOUTServer) BroadCast(context.Context, *BroadCastRequest) (*BroadCastReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadCast not implemented")
}
func (UnimplementedChittyChatServiceOUTServer) mustEmbedUnimplementedChittyChatServiceOUTServer() {}

// UnsafeChittyChatServiceOUTServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChittyChatServiceOUTServer will
// result in compilation errors.
type UnsafeChittyChatServiceOUTServer interface {
	mustEmbedUnimplementedChittyChatServiceOUTServer()
}

func RegisterChittyChatServiceOUTServer(s grpc.ServiceRegistrar, srv ChittyChatServiceOUTServer) {
	s.RegisterService(&ChittyChatServiceOUT_ServiceDesc, srv)
}

func _ChittyChatServiceOUT_BroadCast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadCastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChittyChatServiceOUTServer).BroadCast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChittyChatServiceOUT/BroadCast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChittyChatServiceOUTServer).BroadCast(ctx, req.(*BroadCastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChittyChatServiceOUT_ServiceDesc is the grpc.ServiceDesc for ChittyChatServiceOUT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChittyChatServiceOUT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChittyChatServiceOUT",
	HandlerType: (*ChittyChatServiceOUTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadCast",
			Handler:    _ChittyChatServiceOUT_BroadCast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ChatService/Chat.proto",
}
